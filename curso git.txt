CURSO DE GIT
------------


a)- Lista de comando.

Todos los comandos en el caso de windows seran ejecutados en la aplicacion GITBASH
para iniciar a trabajar con GIT es necesario posesionarse en la carpeta donde se 
encuentran todos nuestros archivos, nuestra Area de trabajo.

los comandos para respaldar nuestro trabajo y tener un control de las versiones de nuestro 
trabajo serian las siguientes.
-------------------------------------------------------------------------------------------------------------------------------------------------
Inicio de monitoreo, en orden hasta hacer respaldos.:
-------------------------------------------------------------------------------------------------------------------------------------------------

1)- Posesionarnos en la carpeta de trabajo que vamos a monitorear. Esto se hace siempre que iniciemos con Git , cuando estamos con proyectos que queremos tener en nuestro control de versiones.

Este es el primer paso, posesionarnos en la carpeta de trabajo de los archivos que queremos
respaldar.

	CD C:/xampp/htdocs/practica_vc
	
	con este comando CD nos ponemos donde queremos en cualquier carpeta que elijamos que vamos a monitorear.

2)- Iniciamos el monitoreo de cambios 
	Una vez posesionado en el directorio de trabajo donde tenemos todos los archivos que 
	queremos estar respaldando ejecutamos el siguiente comando para iniciar a realizar
	cambios sobre los archivos desde el Editor de texto de nuestra preferencia.
		
	git init


	Una vez que hayamos hecho cambios sobre nuestro directorio de trabajo tenemos las siguientes
	opciones para llegar a realizar un Backup de dichos cambios con toda la flexibilidad de GIT.


3)- verificacion de cambios. (git status)
	Este comando nos daria una lista de los archivos que no estan respaldados.
	es opcional ejecutarlo.
	
4)- adicionando archivos para ser respaldados. (git add )	
	este puede ejecutarse de varias formas , si se presiona help en el cmd windows de basch se veran los parametros
	pero hay 2 formas vistas en este video.
	
	4.1 ) pasando de uno a uno los archivos modificados.
		git add [nombre de archivo modificado y extencion]
		
	4.2 ) Pasando todos a la vez
		git add -A	
	si se ejecuta el git status nos indicara que todos los archivos estan pasados y listos para almacenar o para crear el respaldo especifico
	
5)- Generando el Respaldo de los archivos una vez que tenemos todos los cambios listos. (git commit -m "descripcion larga ")
	Esto se ejecuta para finalmente crear un respaldo de los archivos tal y como estan modificados a ese momento.
	se usa el comando:
	
		git commit -m "Descripcion de los cambios realizados entre comillas y puede ser amplia al gusto de manera que explique que hay en este backup"	
	

-------------------------------------------------------------------------------------------------------------------------------------------------
DESCRIPCION GENERAL.
-------------------------------------------------------------------------------------------------------------------------------------------------
Con todos estos comando en esta secuencia se genera  un respaldo de nuestro codigo fuente, los primeros 2 comandos se ejecutan 1 ves a menos que nos cambiemos
de directorio de trabajo.

Los comandos del 3 al 5 los ejecutaremos cuantas veces queramos hacer un kit digamos de respaldo del proyecto, vendria a ser como un punto de restauracion casi
en windows.
-------------------------------------------------------------------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------------------------------------------------------------------
2)- OTROS COMANDOS ADICIONALES.
-------------------------------------------------------------------------------------------------------------------------------------------------

1- git log

	Este comando permite ver que backups digamos asi se han realizado , los diferentes puntos de restauracion digamos. pero en esto aplicativo
	se llaman que commits hemos hecho. cada comit representa diferentes cambios en el codigo fuente adiciones mejoras que nos pueden permitir viajar a los diferentes momentos en que el codigo esta funcionando de una u otra forma.
	
	este seria la forma en que se ven los resultados cuando se ejecuta gitlog:

		ejiron@DESKTOP-6FCBCDR MINGW64 /c/xampp/htdocs/git_pruebas_vc (master)
		$ git log
		commit faff87632e6ba88b5f3eede057f975996cb200f5 (HEAD -> master)
		Author: Eddy Jiron Guillen <eddy.jiron@yahoo.es>
		Date:   Fri Nov 20 20:01:57 2020 -0600

			Adicione un modulo nuevo en el scritorio pero tambien una variable nueva en la js

		commit 7f0518c027a0584bd6663f81c6daab972978ae68
		Author: Eddy Jiron Guillen <eddy.jiron@yahoo.es>
		Date:   Fri Nov 20 19:57:08 2020 -0600

			Se agrego un nuevo modulo a la lista

		commit 09f0dfb2b050fe60856a2d8a62de97bd2c152a40
		Author: Eddy Jiron Guillen <eddy.jiron@yahoo.es>
		Date:   Fri Nov 20 19:52:55 2020 -0600

			Inicio de proyecto
			
	Estos serian los diferentes commit que se han realizado con sus descripciones y si queremos volver a uno en particular
	usamos el comando git checkout [codigo hachs del commit] seguido del numero largo que esta despues de la palabra commit
	
	
	
	
2- git checkout
	este comando se usa para varias cosas entre ellas. las siguientes.
	
	2.1- volver en el TIEMPO a un commit especifico. por ejemplo
		
		git checkout 09f0dfb2b050fe60856a2d8a62de97bd2c152a40
		
		con este comando volveriamos al codigo tal y como estaba al inicio ya que usamos el hach del inicio de proyecto.
		el commit al que volvemos tiene toda la informacion de los commits que se hayan hecho hasta ese momento pasado
		asi que no hay que asustarse si no vemos los commits que habiamos visto la ultima vez
		
		
		si queremos restauran a lo ultimo que teniamos solo ejecutamos
		
		git checkout master
		
		con esto volvemos a lo ultimo que teniamos respaldado.
		
		
		

3- git reset (soft,)		

	3.1 git reset --soft (mas usado)
		elimina un commit pero no toca el area de trabajo principal.como decir no elimina modificaciones ultimas del area o 
		directorio principal.
	
	3.2 git reset --hard
		este borra el commit , borra nuestro codigo todo, toda la area de trabajo.
	
	3.3 git reset --mixed
		elimina un commit , pero no toca el workin area o directorio principal con sus ultimos cambios.
		tampoco elimina